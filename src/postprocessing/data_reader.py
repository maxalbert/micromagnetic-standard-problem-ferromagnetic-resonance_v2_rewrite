import numpy as np
import os

from . import util


class DataReader(object):
    """
    This class encapsulates the reading of raw simulation data
    from a data directory.

    It provides a unified interface to the output generated by
    various micromagnetic simulation softwares (e.g. OOMMF, Nmag)
    which store their simulation output in different formats.
    """

    def __init__(self, data_dir, data_format):
        self.data_dir = data_dir
        self.data_format = data_format
        assert self.data_format in ['OOMMF', 'Nmag']

        data_avg_filename = os.path.join(self.data_dir, 'dynamic_txyz.txt')
        self.data_avg = np.loadtxt(data_avg_filename)

    def get_timesteps(self, unit='s'):
        """
        Return a 1D numpy array containing the timesteps at which
        the magnetisation was saved during the simulation.

        The argument `unit` can either be 's' (= seconds) or 'ns'
        (= nanoseconds).
        """
        # Timestamps are contained in the first column of the averaged data
        timesteps = self.data_avg[:, 0]
        return util.convert_to_unit(timesteps, unit)

    def get_num_timesteps(self):
        """
        Return number of timesteps at which the magnetisation was saved
        during the simulation.
        """
        return len(self.get_timesteps())

    def get_average_magnetisation(self, component):
        """
        Return a 1D numpy array containing the values of the
        spatially averaged magnetization sampled at the time-
        steps during the simulation.
        """
        idx = util.get_index_of_m_avg_component(component)
        return self.data_avg[:, idx]
